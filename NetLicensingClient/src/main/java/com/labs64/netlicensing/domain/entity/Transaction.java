/* Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.labs64.netlicensing.domain.entity;

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.labs64.netlicensing.domain.Constants;

/**
 * Transaction entity used internally by NetLicensing.
 * <p/>
 * Properties visible via NetLicensing API:
 * <p/>
 * <b>number</b> - Unique number (across all products of a vendor) that identifies the transaction. This number is
 * always generated by NetLicensing.
 * <p/>
 * <b>active</b> - always true for transactions
 * <p/>
 * <b>status</b> - see {@link Transaction.Status}
 * <p/>
 * <b>source</b> - see {@link Transaction.Source}
 * <p/>
 * <b>price</b> - price for the transaction.
 * <p/>
 * <b>discount</b> - discount for the transaction.
 * <p/>
 * <b>currency</b> - specifies currency for the transaction price. Check data types to discover which currencies are
 * supported.
 */
public class Transaction extends BaseEntity {

    /**
     * The transaction status enumeration.
     */
    public enum Status {

        /**
         * Transaction still running.
         */
        PENDING,

        /**
         * Transaction is closed.
         */
        CLOSED,

        /**
         * Transaction is cancelled.
         */
        CANCELLED

    }

    private Status status;

    /**
     * The transaction source enumeration.
     */
    public enum Source {

        /**
         * Shop transaction.
         */
        SHOP,

        /**
         * Auto transaction for license create.
         */
        AUTO_LICENSE_CREATE,

        /**
         * Auto transaction for license update.
         */
        AUTO_LICENSE_UPDATE,

        /**
         * Auto transaction for license delete.
         */
        AUTO_LICENSE_DELETE,

        /**
         * Auto transaction for licensee create (with automatic licenses).
         */
        AUTO_LICENSEE_CREATE,

        /**
         * Auto transaction for licensee delete with forceCascade.
         */
        AUTO_LICENSEE_DELETE,

        /**
         * Auto transaction for license template delete with forceCascade.
         */
        AUTO_LICENSETEMPLATE_DELETE,

        /**
         * Auto transaction for product module delete with forceCascade.
         */
        AUTO_PRODUCTMODULE_DELETE,

        /**
         * Auto transaction for product delete with forceCascade.
         */
        AUTO_PRODUCT_DELETE
    }

    private Source source;

    private BigDecimal price;

    private BigDecimal discount;

    private String currency;

    private Date dateCreated;

    private Date dateClosed;

    private Map<String, String> transactionProperties;

    public Status getStatus() {
        return status;
    }

    public void setStatus(final Status status) {
        this.status = status;
    }

    public Source getSource() {
        return source;
    }

    public void setSource(final Source source) {
        this.source = source;
    }

    public BigDecimal getPrice() {
        return price;
    }

    public void setPrice(final BigDecimal price) {
        this.price = price;
    }

    public BigDecimal getDiscount() {
        return discount;
    }

    public void setDiscount(final BigDecimal discount) {
        this.discount = discount;
    }

    public String getCurrency() {
        return currency;
    }

    public void setCurrency(final String currency) {
        this.currency = currency;
    }

    public Date getDateCreated() {
        if (dateCreated == null) {
            return null;
        } else {
            return new Date(dateCreated.getTime());
        }
    }

    public void setDateCreated(final Date dateCreated) {
        if (dateCreated == null) {
            this.dateCreated = new Date();
        } else {
            this.dateCreated = new Date(dateCreated.getTime());
        }
    }

    public Date getDateClosed() {
        if (dateClosed == null) {
            return null;
        } else {
            return new Date(dateClosed.getTime());
        }
    }

    public void setDateClosed(final Date dateClosed) {
        if (dateClosed == null) {
            this.dateClosed = null;
        } else {
            this.dateClosed = new Date(dateClosed.getTime());
        }
    }

    public Map<String, String> getTransactionProperties() {
        if (transactionProperties == null) {
            transactionProperties = new HashMap<String, String>();
        }
        return transactionProperties;
    }

    public void setTransactionProperties(final Map<String, String> transactionProperties) {
        this.transactionProperties = transactionProperties;
    }

    public void addProperty(final String property, final String value) {
        getTransactionProperties().put(property, value);
    }

    public void removeProperty(final String property) {
        getTransactionProperties().remove(property);
    }

    /**
     * @see com.labs64.netlicensing.domain.entity.BaseEntity#getReservedProps()
     */
    public static List<String> getReservedProps() {
        final List<String> reserved = BaseEntity.getReservedProps();
        reserved.add(Constants.Transaction.SOURCE);
        reserved.add(Constants.Transaction.STATUS);
        reserved.add(Constants.Transaction.DATE_CREATED);
        reserved.add(Constants.Transaction.DATE_CLOSED);
        reserved.add(Constants.IN_USE);
        reserved.add(Constants.PRICE);
        reserved.add(Constants.DISCOUNT);
        reserved.add(Constants.CURRENCY);
        return reserved;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append("Transaction [");
        builder.append(super.toString());
        builder.append(", ");
        builder.append(Constants.Transaction.STATUS);
        builder.append("=");
        builder.append(getStatus());
        builder.append(", ");
        if (transactionProperties != null) {
            for (final Map.Entry<String, String> property : transactionProperties.entrySet()) {
                builder.append(", ");
                builder.append(property.getKey());
                builder.append("=");
                builder.append(property.getValue());
            }
        }
        builder.append("]");
        return builder.toString();
    }

}
